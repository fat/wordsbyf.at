title: "I don't write \"JavaScript\""
author: Fat
date: 2011/10/30

I've been getting [asked](https://twitter.com/#!/nmosafi/status/129946172860268544) and even [hassled](https://twitter.com/#!/pamelafox/status/128718640467021824) on the absence of semicolons in bootstraps source quite a bit lately. This sorta surprised me. So much in fact i had to create an entire blog just to write about it...

Despite what you may have heard, you have options when you write JS. **LOTS** of options. It's pretty neat. Consider this simple bit of code:

    if (event.preventDefault) {
      event.preventDefault()
    }

Pretty straight forward. However, the brackets are optional and the above code could be rewritten to look something like this:

    if (event.preventDefault) event.preventDefault()

If you were really having fun with it you could lose the `if` all together and do something like this:

    event.preventDefault && event.preventDefault()

Each is perfectly valid. Each behaves the same. It's just a matter of *preference* and finding the style that makes most sense to you.


###What is "JavaScript"?

With a syntax as relaxed as javascript's, you see lots of different approaches to the same problem. Unfortunately, this unbound diversity often results in at least one particularly alarming approach (this approach will likely have been written by [Jason Stirman](//twitter.com/stirman) <3 ). Unfortunately, encountering something like this can drive people towards a strict, prescriptive linter like JSLint.

For many frontend engineers, javascript is still "javascript the good parts". It's stilllll JSLint's "JavaScript".

But it doesn't *need* to be. You have options. You can see other people. (If you haven't already I highly recommend you stop what you're doing and checkout [JSHint](//jshint.com)).

*One of the single most liberating experiences in your javascript career will be when you subvert a Crockfordism.* That moment where no one is looking and you throw in something l33t like `~arr.indexOf('fat')` instead of `arr.indexOf('fat') > -1`.

Write code you find beautiful. Get cheesy about it. You can really tell when someone cares about the aesthetics of their source!

(also, maybe JSLint turns out to be your jam - that's cool too, but experiment!)


### Why are there no semicolons in bootstrap?

So to directly answer the original question.... Technically there are semicolons in bootstrap.

The majority of lines however don't end with semicolons because they simply aren't necessary and I prefer the minimal aesthetic. For me, `\n` character is enough, and the semicolon character is redundant. Here's an [excellent article](http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding) by [@izs](//twitter.com/izs) which goes into greater detail on the issue.

That said, there *is* one place that I've added semicolons which are technically *optionally* present and that is at the end of all bootstrap js files. This was added for developers who were curling bootstrap js plugins and concatenating them with rails generated js.

Although that seems innocent enough, there exists this highly unfortunate pattern:

    (function () {
      // le code
    }())

Because `()` executes code in js, when multiple functions are strung together like that, the javascript interpreter tries to execute them sequentially in a [sort of chain-like fashion](//jsfiddle.net/G8SHx/).

Instead if you are writing self executing anonymous functions, it would be safer and a bit more courteous to write them like this:

    !function () {
      // le code
    }()

    // or

    ~function () {
      // le code
    }

Ultimately, it results in the same thing and doesn't give you the syntax error when [smooshing things together](http://video.adultswim.com/lucy-the-daughter-of-the-devil/mill-or-himalountain.html). :)

That said, i respect that code out there will exist in the former style, so we've elected to add a closing semicolon to play nicely.