---
title: Web Components Pt. 1
date: 31/05/2012

I've just given a [talk](//speakerdeck.com/u/fat/p/bootstrapjs) at O'rielly's Fluent. There I used Bootstrap and a trip to Disneyland as a platform to discuss what might be the most important spec you've never heard of: [Web Components](http://www.w3.org/TR/2012/WD-components-intro-20120522/).

Web Components are a new, super promising [w3c working draft](//www.w3.org/TR/2012/WD-components-intro-20120522/#custom-element-section) driven by google's Dominic Cooney and Dimitri Glazkov. Directly from the spec:

>The component model for the Web (also known as Web Components)... let web application authors define widgets with a level of visual richness not possible with CSS alone, and ease of composition and reuse not possible with script libraries today.

But rather than simply deconstructing the block above, I want to call out explicitly why I think this specification is super important for the web as a platform and try to use this to guide our exploration of the draft.

The things which immediately excited me about this draft were the following ideas:

+ a transport for html, css, and js to be loaded as a single asset
+ ability to define custom, accessible elements and make them available as JS constructors
+ actual component isolation and encapsulation

Today I'm going to be sharing Pt. 1 of my exploration/conversation about web components - **Component Assets**.

##### Component Assets

For some time I've dreamt of a true package manager for the web, my first attempt at this being [Ender](//github.com/ender-js/Ender). Built on top of the NPM registry, on the surface Ender does *almost* everything you'd expect from a client-side JS package manager - resolving dependencies, managing versions, bundling files…

However, unlike Node libraries, libraries built for browsers often consist of more than just JavaScript. What becomes abundantly clear as you work on projects like Ender is that relying on the CommonJS specification to solve browser problems is actually a mistake. Things just don't quite fit.

CommonJS is amazing. As such, it's no surprise that once a browser developer is exposed to it, often through Node and NPM, they become increasingly uneasy with the state of browser development today.

This dissatisfaction has fed itself almost directly into the relatively popular trend of trying to aggressively shim CommonJS into client-side development (whether this be `require` syntax or trying to use package.json as a package specification for browser modules).

To be fair, the name "CommonJS" is incredibly misleading for a specification developed out of a frustration over what ["Server Side Javascript needs"](//www.blueskyonmars.com/2009/01/29/what-server-side-javascript-needs/). But maybe the bigger problem is that for whatever reason, the web (or at least some of it), seems to be identifying more with CommonJS than the w3c... you know? those people who are supposed to be writing the specs for us browser developers.

At Twitter, and across the web, I've seen a number of attempts made to move client development closer to CommonJS.

Ender uses a simple require shim to allow you to import already loaded packages without polluting the window object, loadrunner (or the more popular require.js) use AMD to define an inline dependency model which is supposed to have the same "look and feel" as the CommonJS require syntax, and asset pipelines like browserify, sprockets-commonjs, or internally at twitter, CDNgoose, use the server to simulate a require like environment in the browser.

In an effort to abstract away the browser and it’s limitations, these implementations seem to be distancing client javascript from the rest of it's stack: HTML and CSS. Because of this UI components are becoming more and more fragmented and almost surely following this, involving more and more developer cycles to implement. This has resulted in a sort of widget/library identity crisis (particularly for ui libraries authors like bootstrap, jquery-ui, etc):

<div class="well">
<blockquote class="twitter-tweet tw-align-center"><p>organizing 3rd party assets together in a single folder like jquery-ui/ or break them up and store in respective, css/img/js folders?</p>&mdash; Tim Branyen (@tbranyen) <a href="https://twitter.com/tbranyen/status/208986148339589120" data-datetime="2012-06-02T18:19:15+00:00">June 2, 2012</a></blockquote>
<script src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>

It is precisely with this question that the Web Components spec becomes most interesting.

With the introduction of the component model, the w3c have introduced a new link relationship called "components". This specifies the use of a single HTML file as an aggregate transport for templates, custom elements, CSS, and even JavaScript. In practice it looks something like this:

    <link rel="components" href="bootstrap.html">

What does this mean for browser package managers, asset pipelines, and the web at large? Well, we may for the first time have a single entity representing web components, rather than a horrible array of template, css, and js path listings.

What's more, I think if this spec is realized we may actually see client developers moving towards a new development model, with a proper package management system and overall a greatly improved developer workflow.


##### More Information

While i'm at it, it's worth pointing out that If you're looking to dig up additional information (beyond the spec), I've found the main conversations on web components are taking place on [google+](//plus.google.com/103330502635338602217/posts), the w3c [bug tracker](//www.w3.org/Bugs/Public/buglist.cgi?product=WebAppsWG&component=Component%20Model&resolution=---), and the [w3c mailing list](//lists.w3.org/Archives/Public/public-webapps/2012AprJun/subject.html) - although Dimitry has begrudgenly gotten back on twitter for the time being :)